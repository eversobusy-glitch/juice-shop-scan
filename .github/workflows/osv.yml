# .github/workflows/osv.yml
name: OSV Scanner (SCA)  # Workflow name shown in GitHub Actions UI

on:
  push:                  # Trigger the workflow on push events
    branches: [master, main]  # Only run on pushes to master or main branches
  pull_request:          # Also run on pull requests targeting these branches

jobs:
  osv-scanner:           # Job name: runs the OSV Scanner for SCA
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner provided by GitHub

    steps:
      - uses: actions/checkout@v4  # Step 1: Check out the repo code onto the runner

      - uses: actions/setup-node@v4  # Step 2: Set up Node.js environment
        with:
          node-version: 18          # Specify Node.js version (LTS)

      # Step 3: Safely generate a lockfile without executing install scripts
      - name: Generate package-lock.json
        run: npm install --package-lock-only --ignore-scripts

      # Step 4: Install jq (used for parsing and cleaning JSON output)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Step 5: Download and install the OSV Scanner binary
      - name: Install OSV-Scanner
        run: |
          curl -sSfL https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner && sudo mv osv-scanner /usr/local/bin/

      # Step 6: Run OSV Scanner on the lockfile and clean the output
      - name: Run OSV-Scanner → JSON
        run: |
          # Scan the lockfile and save raw results
          osv-scanner --lockfile=package-lock.json --format json > osv-results.json || true

          # Remove noisy fields for readability (e.g., package_path)
          jq 'del(.results[]?.packages[]?.package_path)' osv-results.json > osv-results-clean.json

      # Step 7: Upload raw and cleaned results as artifacts
      - name: Upload OSV results
        uses: actions/upload-artifact@v4
        with:
          name: osv-results
          path: |
            osv-results.json
            osv-results-clean.json

      # Step 8: Append a human-readable CVE summary to the GitHub job page
      - name: Add CVE list to job summary
        shell: bash
        run: |
          set -eo pipefail

          echo "## OSV Scanner — CVE Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Build Markdown table rows. We read osv-results.json (the raw file),
          # but you can switch to osv-results-clean.json if you prefer.
          rows="$(jq -r '
            def sev:
              # Prefer numeric CVSS, else string, else n/a
              (.severity[]?.score // .database_specific.severity // "n/a");
            def fixed:
              # Prefer top-level fixedVersion, else any affected[].ranges[].events[].fixed, else n/a
              (.fixedVersion // (.affected[]?.ranges[]?.events[]? | select(has("fixed")) | .fixed) // "n/a");
            .results[]?                           # each source result
            | .packages[]? as $p                  # each package result
            | ($p.package.name // "n/a") as $pkg
            | ($p.package.version // "n/a") as $ver
            | $p.vulnerabilities[]?               # each vuln for that package
            | "| \($pkg) | \($ver) | \(.id) | \(sev) | \(fixed) |"
          ' osv-results.json || true)"

          if [ -z "$rows" ]; then
            echo "_No CVEs found._" >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "| Package | Version | CVE | Severity | Fixed |"
              echo "|---|---|---|---|---|"
              printf "%s\n" "$rows" | sort -u
            } >> "$GITHUB_STEP_SUMMARY"
          fi

